create database case_study1;
use case_study1;

select*from fact;
select*from Location;
select*from Product;

--Display the number of states present in the LocationTable

select count(state)as no_of_states from Location;

--How many products are of regular type?

select count(*) as count from Product where type='regular';

--How much spending has been done on marketing of product ID 1?

select sum(marketing) as sum_of_marketing from fact where ProductId=1;

--What is the minimum sales of a product?

select min(sales)as min_sales from fact;

--Display the max Cost of Good Sold (COGS)

select max(cogs) as max_cogs from fact;

--Display the details of the product where product type is coffee

select*from product where Product_Type= 'coffee';

--Display the details where total expenses are greater than 40

select * from fact where Total_Expenses >40;

--What is the average sales in area code  719?

select avg(sales)as average_sales from fact where Area_Code=719;

--Find out the total profit generated by Colorado

SELECT SUM(profit) AS total_profit
FROM fact
JOIN Location ON fact.area_code = Location.area_code
WHERE state = 'Colorado';

--Display the average inventory for each product ID

select productid, avg(inventory)as avg_inventory from fact group by ProductId order by ProductId;


--Display state in a sequential order in a Location Table.

select* from Location order by  state;

--Display the average budget of the Product where the average budget
margin should be greater than 100.

select productid, avg(budget_margin) as avg from fact group by productid having avg(budget_margin)>100;


--What is the total sales done on date 2010-01-01?

SELECT SUM(sales) AS total_sales
FROM fact
WHERE date = '2010-01-01';

--Display the average total expense of each product ID on an individual date.

select productid,avg(total_expenses)as avg from fact group by ProductId,date;


--Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.


SELECT 
    fact.date, 
    fact.productID, 
    product.product_type, 
    product.product, 
    fact.sales, 
    fact.profit, 
    Location.state, 
    Location.area_code
FROM fact
JOIN Location ON fact.area_code = Location.area_code
JOIN product ON fact.productID = product.productID;



--Display the rank without any gap to show the sales wise rank

select sales, DENSE_RANK() over (order by sales desc) as denserank from fact;


--Find the state wise profit and


select state,sum(profit)as sum,sum(sales)as salessum from fact join location on fact.Area_Code=Location.Area_Code group by state;


--Find the state wise profit and sales along the productname


select product,state,sum(profit)as sum,sum(sales)as salessum from fact 
join location on fact.Area_Code=Location.Area_Code 
join Product on fact.ProductId= Product.ProductId
group by state,Product;


--If there is an increase in sales of 5%, calculate the increasedsales.

SELECT 
    sales, 
    sales * 1.05 AS increased_sales
FROM fact;


--Find the maximum profit along with the product ID and producttype.

select fact.productid, product.product_type,max(profit)as maximum_profit from fact 
join product on fact.ProductId= Product.ProductId 
group by fact.productid, product.product_type;


--Create a stored procedure to fetch the result according to the product type from Product Table

create procedure sprecord @producttype varchar(50) 
as
begin
   select* from product where Product_Type= @producttype
end

exec dbo.sprecord'tea';

--Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or 


select*,
case
    when total_expenses<60 then 'profit'
	else 'loss'
end as profit_or_loss
from fact;

--Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order


select
     DATEPART(week,date) as weeknumber,
	 productid,
	 sum(sales)as sumsales
from fact
group by datepart(week,date),productid
order by weeknumber,productid;


--Apply union and intersection operator on the tables which consist of attribute area code.

select area_code from fact
union
select area_code from Location

